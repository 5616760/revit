using Autodesk.Revit.Attributes;using Autodesk.Revit.DB;using Autodesk.Revit.DB.Architecture;using Autodesk.Revit.DB.Structure;using Autodesk.Revit.UI;using Autodesk.Revit.UI.Selection;using System;using System.Collections.Generic;using System.Linq;namespace RailingCreat {    [TransactionAttribute(TransactionMode.Manual)]    [RegenerationAttribute(RegenerationOption.Manual)]    public class Class1 : IExternalCommand {        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements) {
            //message = "请选择要生成轨道的模型线：";
            UIDocument uiDoc = commandData.Application.ActiveUIDocument;            Document doc = uiDoc.Document;            IList<Curve> curs = GetCurves(uiDoc);//选择的曲线
            ElementId rId = GetFamilySybolId(doc, "钢轨+道床", BuiltInCategory.OST_StairsRailing);//栏杆ID
            ElementId leveId = GetLevel(doc, "Level 1");//标高ID
            bool r1 = MyCreateRailing(rId, doc, curs, leveId);            ElementId gId = new ElementId(208785);//GetFamilySybolId(doc, "轨枕", BuiltInCategory.INVALID);//轨枕ID
            bool r2 = MyCreateGuizheng(gId, doc, curs, leveId);            if (r1 && r2) {                return Result.Succeeded;            }            else {                message = "创建失败";                return Result.Failed;            }        }        private static bool MyCreateGuizheng(ElementId gId, Document doc, IList<Curve> curs, ElementId leveId) {            if (gId != null) {                FamilySymbol guiZhenFamilySymbol = doc.GetElement(gId) as FamilySymbol;                Level level = doc.GetElement(leveId) as Level;                Transaction tr = new Transaction(doc); //创建对象必须添加事务
                tr.Start("轨枕");                foreach (Curve c in curs) {                    double l = c.Length * 304.8;                    int n = (int)Math.Floor(l / 650);                    double ang = 0;                    if (c is Line) {                        Line line = c as Line;                        double lAng = line.Direction.AngleTo(XYZ.BasisX);                        ang = line.Direction.Y >= 0 ? lAng + Math.PI / 2 : Math.PI / 2 - lAng;                        for (double i = 0.5; i < n; i += 1) {                            XYZ pt = c.Evaluate(i / n, true);                            Transform t = c.ComputeDerivatives(i / n, true);                            FamilyInstance gzInstance = doc.Create.NewFamilyInstance(pt, guiZhenFamilySymbol, level, StructuralType.NonStructural);                            ElementTransformUtils.RotateElement(doc, gzInstance.Id, Line.CreateBound(pt, new XYZ(pt.X, pt.Y, pt.Z + 1)), ang);                        }                    }                    else {                        for (double i = 0.5; i < n; i += 1) {                            Transform t = c.ComputeDerivatives(i / n, true);                            XYZ pt = t.Origin;                            double lAng = t.BasisY.AngleTo(new XYZ(1, 0, 0));                            ang = t.BasisY.Y >= 0 ? lAng : -lAng;                            FamilyInstance gzInstance = doc.Create.NewFamilyInstance(pt, guiZhenFamilySymbol, level,                                StructuralType.NonStructural);                            ElementTransformUtils.RotateElement(doc, gzInstance.Id,                                Line.CreateBound(pt, new XYZ(pt.X, pt.Y, pt.Z + 1)), ang);                        }                    }                }

                //TaskDialog.Show("No", num.ToString());
                tr.Commit();                return true;            }            else {                TaskDialog.Show("ERR", "对象为空");                return false;            }        }        private ElementId GetFamilySybolId(Document doc, string rail, BuiltInCategory railCate) {            FilteredElementCollector fec = new FilteredElementCollector(doc);            fec.OfCategory(railCate);            ElementId id = null;            foreach (Element element in fec) {                if (element.Name == rail) {                    id = element.Id;                }            }            if (id == null) {                TaskDialog.Show("未找到", "未找到名为\"" + rail + "\"的栏杆族，请先插入或编辑族！", TaskDialogCommonButtons.Ok);            }
            // new ElementId(25225);
            return id;        }        private ElementId GetLevel(Document doc,string levelName) {            FilteredElementCollector temc = new FilteredElementCollector(doc);            temc.OfClass(typeof(Level));            Level lvl = temc.First(m => m.Name == levelName) as Level;            ElementId id = lvl.Id;//new ElementId(311);//
            return id;        }        private IList<Curve> GetCurves(UIDocument uidoc) {            IList<Curve> c = new List<Curve>();            IList<Reference> rList = uidoc.Selection.PickObjects(ObjectType.Element);            foreach (Reference reference in rList) {                Element r = uidoc.Document.GetElement(reference);                if (r is ModelCurve) {                    ModelCurve m = r as ModelCurve;                    Curve curve = m.GeometryCurve;                    c.Add(curve);                }//只能拾取单体线段
            }            return c;        }        private static bool MyCreateRailing(ElementId rId, Document doc, IList<Curve> curs, ElementId leveId) {            if (rId != null) {                Transaction tr = new Transaction(doc); //创建对象必须添加事务
                tr.Start("Railing");                foreach (Curve c in curs) {                    CurveLoop loop = new CurveLoop();                    loop.Append(c);                    Railing rail = Railing.Create(doc, loop, rId, leveId);                }                tr.Commit();                return true;            }            else {                return false;            }        }    }}